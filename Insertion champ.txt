
C'est une excellente initiative d'ajouter ces champs pour la tra√ßabilit√© du mobilier !

Vous avez correctement ajout√© les champs "Mobilier C" et "Mobilier F" dans le popup des vestiges existants (pop_Vestiges_2).

Cependant, les lignes manquantes se trouvent dans la fonction qui g√®re le dessin de nouvelles entit√©s (L.Draw.Event.CREATED), que vous appelez la fonction unidirectionnelle vers FileMaker, car c'est l√† que les attributs sont saisis et assign√©s pour la premi√®re fois.

Voici les lignes de code que vous avez oubli√©es et o√π les ins√©rer dans le fichier index.html.

1. Ajout de la collecte des donn√©es (Prompts)
Dans la fonction map.on(L.Draw.Event.CREATED, function (e) { ... }) :

Vous devez ajouter les deux bo√Ætes de dialogue (prompt) apr√®s la collecte du Type (lignes 805-807 dans le code fourni) :

JavaScript
// Lignes √† ajouter : Collecte des rubriques MOBILIER C et MOBILIER F
var mobilierCVal = prompt("Entrez la valeur pour 'MOBILIER C' :");
var mobilierFVal = prompt("Entrez la valeur pour 'MOBILIER F' :");

// Lignes existantes juste avant :
// var typeVal = prompt("Entrez la valeur pour 'TYPE' (ex: Mur, Sol, Fosse) :");
2. Ajout des propri√©t√©s √† l'objet GeoJSON
Toujours dans la m√™me fonction (map.on(L.Draw.Event.CREATED, ...)), vous devez ajouter les propri√©t√©s dans l'objet feature.properties (lignes 810-815 dans le code fourni) :

JavaScript
// Lignes existantes :
feature.properties = {
    'fait': faitVal.trim(),
    'Phase': (phaseVal || 'inconnue').trim(),
    'Type': (typeVal || 'non d√©fini').trim()
    
    // Lignes √† ajouter : assignation des nouvelles rubriques
    'Mobilier C': (mobilierCVal || '').trim(),
    'Mobilier F': (mobilierFVal || '').trim()
};
3. Mise √† jour du Popup des √©l√©ments dessin√©s
Enfin, vous devez mettre √† jour le contenu du popup pour la nouvelle entit√© que vous venez de dessiner, dans la partie onEachFeature de la couche temporaire (newLayer) (lignes 822-828 dans le code fourni) :

JavaScript
// Lignes existantes (√† modifier) :
var popupContent = '<table>\
    <tr><th>FAIT</th><td>' + feature.properties['fait'] + '</td></tr>\
    <tr><th>PHASE</th><td>' + feature.properties['Phase'] + '</td></tr>\
    <tr><th>TYPE</th><td>' + feature.properties['Type'] + '</td></td></tr>\
    
    // Lignes √† ajouter :
    <tr><th>MOBILIER C</th><td>' + feature.properties['Mobilier C'] + '</td></td></tr>\
    <tr><th>MOBILIER F</th><td>' + feature.properties['Mobilier F'] + '</td></td></tr>\
 </table>';
En ajoutant ces lignes, votre "fonction unidirectionelle filemaker" (la logique d'enregistrement des attributs apr√®s le dessin) sera compl√®te pour les cinq champs requis : fait, Phase, Type, Mobilier C et Mobilier F.



Le probl√®me est que votre code actuel lit les donn√©es de FileMaker pour mettre √† jour la carte, mais il ignore compl√®tement les champs MOBILIER C et MOBILIER F lors de la mise √† jour des propri√©t√©s.

Vous avez impl√©ment√© une synchronisation unidirectionnelle de FileMaker vers Leaflet, mais vous avez omis de lire et d'appliquer ces deux champs sp√©cifiques.

Voici les modifications exactes √† apporter √† votre fonction updateFeatureProperties :

üõ†Ô∏è Correction du Code de Synchronisation
Les champs MOBILIER C et MOBILIER F sont d√©finis dans votre popup d'affichage, mais ils ne sont jamais extraits de la r√©ponse de l'API FileMaker (fmRecord).

1. Modifier updateFeatureProperties
Dans la fonction qui met √† jour les propri√©t√©s de l'entit√© Leaflet avec les donn√©es de FileMaker, vous devez ajouter l'extraction des valeurs pour Mobilier C et Mobilier F.

Code Actuel (Probl√©matique):

JavaScript

// --- Mise √† jour des propri√©t√©s des entit√©s ---
function updateFeatureProperties(currentFeature, fmRecord) {
¬† const f = fmRecord.fieldData;

¬† // Normalisation insensible √† la casse
¬† const phaseValue = f.Phase ?? f.phase ?? f.PHASE ?? null;
¬† const typeValue¬† = f.Type¬† ?? f.type¬† ?? f.TYPE¬† ?? null;

¬† currentFeature.properties['Phase'] = phaseValue;
¬† currentFeature.properties['Type']¬† = typeValue;
¬† currentFeature.properties[FM_KEY_FIELD] = f[FM_KEY_FIELD];
}
Code Corrig√© (Ajouter les deux lignes en gras) :

JavaScript

// --- Mise √† jour des propri√©t√©s des entit√©s ---
function updateFeatureProperties(currentFeature, fmRecord) {
¬† const f = fmRecord.fieldData;

¬† // Normalisation insensible √† la casse
¬† const phaseValue = f.Phase ?? f.phase ?? f.PHASE ?? null;
¬† const typeValue¬† = f.Type¬† ?? f.type¬† ?? f.TYPE¬† ?? null;
¬† 
  // üí° Correction : Extraction des donn√©es MOBILIER C et MOBILIER F
  const mobilierCVal = f['Mobilier C'] ?? f['Mobilier_C'] ?? null; // Adapter le nom du champ FileMaker si n√©cessaire (ex: Mobilier_C)
  const mobilierFVal = f['Mobilier F'] ?? f['Mobilier_F'] ?? null;

¬† currentFeature.properties['Phase'] = phaseValue;
¬† currentFeature.properties['Type']¬† = typeValue;
¬† currentFeature.properties[FM_KEY_FIELD] = f[FM_KEY_FIELD];
  
  // üí° Correction : Application des donn√©es MOBILIER C et MOBILIER F
  currentFeature.properties['Mobilier C'] = mobilierCVal;
  currentFeature.properties['Mobilier F'] = mobilierFVal;
}



Code final sur draw disparait
// --- AJOUT DU CONTR√îLE DE DESSIN ET DES ATTRIBUTS ---

// 1. Cr√©er un groupe de calques pour stocker les √©l√©ments dessin√©s
var drawnItems = new L.FeatureGroup();
map.addLayer(drawnItems);

// 2. Configurer le contr√¥le de dessin
var drawControl = new L.Control.Draw({
    // ‚úÖ Positionnement en bas √† gauche
    position: 'bottomleft', 
    edit: {
        featureGroup: drawnItems, // Permet d'√©diter/supprimer les √©l√©ments dessin√©s
        remove: true
    },
    draw: {
        polygon: {
            allowIntersection: false, 
            showArea: true 
        },
        // Seul le polygone est activ√© selon votre configuration
        polyline: false, 
        circle: false,   
        marker: false,   
        rectangle: false, 
        circlemarker: false  
    }
});

// üí• AJOUTER LE CONTR√îLE √Ä LA CARTE
map.addControl(drawControl); 

// 3. G√©rer l'√©v√©nement de cr√©ation d'un √©l√©ment
map.on(L.Draw.Event.CREATED, function (e) {
    var type = e.layerType,
        layer = e.layer;

    if (type === 'polygon') {
        
        // --- Collecte des rubriques (attributs) via des bo√Ætes de dialogue ---
        var faitVal = prompt("Entrez la valeur pour 'FAIT' (ex: F99) :");
        if (faitVal === null || faitVal.trim() === "") {
            // Annuler si l'utilisateur ne donne pas de nom de Fait
            return;
        }

        var phaseVal = prompt("Entrez la valeur pour 'PHASE' (ex: antiquit√©, m√©di√©val, inconnue) :");
        var typeVal = prompt("Entrez la valeur pour 'TYPE' (ex: Mur, Sol, Fosse) :");
        var mobilierCVal = prompt("Entrez la valeur pour 'MOBILIER C' (ex: 30,26,45) :");
        var mobilierFVal = prompt("Entrez la valeur pour 'MOBILIER F' (ex: 25,89,78) :");
        
        // 4. Cr√©er la structure GeoJSON avec les nouvelles rubriques
        var feature = layer.toGeoJSON();
        feature.properties = {
            'fait': faitVal.trim(),
            'Phase': (phaseVal || 'inconnue').trim(),
            'Type': (typeVal || 'non d√©fini').trim(),
            'Mobilier C': (mobilierCVal || '').trim(),
            'Mobilier F': (mobilierFVal || '').trim()
        };

        // 5. Cr√©er une nouvelle couche Leaflet √† partir du GeoJSON pour styliser et ajouter le popup
        var newLayer = L.geoJson(feature, {
            onEachFeature: function(feature, layer) {
                 // Recr√©er le contenu du popup avec les rubriques saisies
                 var popupContent = '<table>\
                    <tr><th>FAIT</th><td>' + feature.properties['fait'] + '</td></tr>\
                    <tr><th>PHASE</th><td>' + feature.properties['Phase'] + '</td></tr>\
                    <tr><th>TYPE</th><td>' + feature.properties['Type'] + '</td></td></tr>\
                    <tr><th>MOBILIER C</th><td>' + feature.properties['Mobilier C'] + '</td></td></tr>\
                    <tr><th>MOBILIER F</th><td>' + feature.properties['Mobilier F'] + '</td></td></tr>\
                 </table>';
                 layer.bindPopup(popupContent, { maxHeight: 400 });
                 
                 // Appliquer un style visuel simple pour diff√©rencier les √©l√©ments dessin√©s
                 layer.setStyle({
                     color: '#00ff00', 
                     weight: 3, 
                     opacity: 0.7, 
                     fillColor: '#00ff00', 
                     fillOpacity: 0.3
                 });
            }
        });

        // 6. Ajouter les √©l√©ments dessin√©s au groupe (ils deviennent visibles et √©ditables)
        newLayer.eachLayer(function(l) {
            drawnItems.addLayer(l);
        });
        
        console.log("Nouveau polygone dessin√© et attributs enregistr√©s.", feature.properties);
    }
});


et rajoueter // ‚úÖ CORRECTION MAJEURE: Emp√™cher le conteneur de filtre personnalis√© de bloquer les clics
var filterControls = document.getElementById('filter-controls');
if (filterControls) {
    // Ceci permet aux clics d'atteindre les contr√¥les Leaflet sous le panneau de filtre.
    L.DomEvent.disableClickPropagation(filterControls);
    L.DomEvent.disableScrollPropagation(filterControls); 
    console.log("Propagation des √©v√©nements d√©sactiv√©e pour #filter-controls.");
}